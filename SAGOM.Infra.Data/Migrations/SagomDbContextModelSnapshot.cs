// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAGOM.Infra.Data.Context;

#nullable disable

namespace SAGOM.Infra.Data.Migrations
{
    [DbContext(typeof(SagomDbContext))]
    partial class SagomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("valor");

                    b.Property<string>("CnpjPayer")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("cnpj_pagante")
                        .IsFixedLength();

                    b.Property<string>("CnpjReceiver")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("cnpj_recebedor")
                        .IsFixedLength();

                    b.Property<string>("CpfPayer")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf_pagante")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("descricao");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("data_vencimento");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("data_pagamento");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CnpjReceiver");

                    b.HasIndex(new[] { "Id" }, "UQ__Conta__3213E83EB19ED64D")
                        .IsUnique();

                    b.ToTable("Conta", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Company", b =>
                {
                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("cnpj")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("endereço");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telefone");

                    b.HasKey("Cnpj")
                        .HasName("PK__Empresa__35BD3E491A4AD40A");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Costumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UQ__Cliente__3213E83E69D0E29A")
                        .IsUnique();

                    b.HasIndex(new[] { "Cpf" }, "UQ__Cliente__D836E71F87F53EB2")
                        .IsUnique()
                        .HasFilter("[cpf] IS NOT NULL");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.CostumerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int?>("IdBill")
                        .HasColumnType("int")
                        .HasColumnName("id_conta");

                    b.Property<int?>("IdCostumer")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborador");

                    b.Property<int?>("IdVehicle")
                        .HasColumnType("int")
                        .HasColumnName("id_veiculo");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descricao_problema");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateLastStatus")
                        .HasColumnType("date")
                        .HasColumnName("data_ultima_alteracao_status");

                    b.HasKey("Id");

                    b.HasIndex("IdCostumer");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdVehicle");

                    b.HasIndex(new[] { "Id" }, "UQ__Atendime__3213E83ECF37128A")
                        .IsUnique();

                    b.ToTable("Atendimento", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CnpjCompany")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("cnpj_empresa")
                        .IsFixedLength();

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf")
                        .IsFixedLength();

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("id_cargo");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("salario");

                    b.HasKey("Id");

                    b.HasIndex("CnpjCompany");

                    b.HasIndex("IdRole");

                    b.HasIndex(new[] { "Id" }, "UQ__Colabora__3213E83E38672861")
                        .IsUnique();

                    b.HasIndex(new[] { "Cpf" }, "UQ__Colabora__D836E71F0FEE059D")
                        .IsUnique()
                        .HasFilter("[cpf] IS NOT NULL");

                    b.ToTable("Colaborador", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Person", b =>
                {
                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("endereco");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("sobrenome");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nome");

                    b.HasKey("Cpf")
                        .HasName("PK__Pessoa__D836E71EE3ED5CB1");

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("descricao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("nome");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("valor_Unitario");

                    b.HasKey("Id");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ProductServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_produto");

                    b.Property<int?>("IdServiceOrder")
                        .HasColumnType("int")
                        .HasColumnName("id_ordem_servico");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantidade");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdServiceOrder");

                    b.HasIndex(new[] { "Id" }, "UQ__Produto___3213E83E6CB98995")
                        .IsUnique();

                    b.ToTable("Produto_Ordem_de_Servico", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descricao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("Cargo", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("descricao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("nome");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("Servico", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int?>("IdCostumerService")
                        .HasColumnType("int")
                        .HasColumnName("id_atendimento");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("motivo");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateLastStatus")
                        .HasColumnType("date")
                        .HasColumnName("data_ultima_alteracao_status");

                    b.HasKey("Id");

                    b.HasIndex("IdCostumerService");

                    b.HasIndex(new[] { "Id" }, "UQ__Ordem_de__3213E83E8AF8C1A8")
                        .IsUnique();

                    b.ToTable("Ordem_de_Servico", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ServiceServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("id_servico");

                    b.Property<int?>("IdServiceOrder")
                        .HasColumnType("int")
                        .HasColumnName("id_ordem_servico");

                    b.HasKey("Id");

                    b.HasIndex("IdService");

                    b.HasIndex("IdServiceOrder");

                    b.HasIndex(new[] { "Id" }, "UQ__Servico___3213E83E1A824DDA")
                        .IsUnique();

                    b.ToTable("Servico_Ordem_de_Servico", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("descricao");

                    b.Property<DateTime?>("DiscardDate")
                        .HasColumnType("date")
                        .HasColumnName("data_de_descarte");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborador");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("nome");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("valor");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("data_de_compra");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.HasIndex(new[] { "Id" }, "UQ__Ferramen__3213E83E49A210E9")
                        .IsUnique();

                    b.ToTable("Ferramenta", (string)null);
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("placa")
                        .IsFixedLength();

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("país");

                    b.Property<string>("BrandName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("marca");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdCostumer")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<string>("ModelName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("modelo");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("estado");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("ano");

                    b.HasKey("LicensePlate", "Country")
                        .HasName("PK__Veiculo__6432AF2D5F8CD547");

                    b.HasIndex("IdCostumer");

                    b.HasIndex(new[] { "Id" }, "UQ__Veiculo__3213E83ED5ABF8C8")
                        .IsUnique();

                    b.ToTable("Veiculo", (string)null);
                });

            modelBuilder.Entity("SAGOM.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SAGOM.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SAGOM.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAGOM.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SAGOM.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Bill", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Company", "CnpjReceiverNavigation")
                        .WithMany("Bills")
                        .HasForeignKey("CnpjReceiver")
                        .IsRequired()
                        .HasConstraintName("FK_Conta.cnpj_recebedor");

                    b.Navigation("CnpjReceiverNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Costumer", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Person", "CpfNavigation")
                        .WithOne("Costumer")
                        .HasForeignKey("SAGOM.Domain.Entities.Costumer", "Cpf")
                        .HasConstraintName("FK_Cliente.cpf");

                    b.Navigation("CpfNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.CostumerService", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Costumer", "IdCostumerNavigation")
                        .WithMany("CostumerServices")
                        .HasForeignKey("IdCostumer")
                        .HasConstraintName("FK_Atendimento.id_cliente");

                    b.HasOne("SAGOM.Domain.Entities.Employee", "IdEmployeeNavigation")
                        .WithMany("CostumerServices")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("FK_Atendimento.id_colaborador");

                    b.HasOne("SAGOM.Domain.Entities.Vehicle", "IdVehicleNavigation")
                        .WithMany("CostumerServices")
                        .HasForeignKey("IdVehicle")
                        .HasPrincipalKey("Id")
                        .HasConstraintName("FK_Atendimento.id_veiculo");

                    b.Navigation("IdCostumerNavigation");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdVehicleNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Company", "CnpjCompanyNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("CnpjCompany")
                        .HasConstraintName("FK_Colaborador.cnpj_empresa");

                    b.HasOne("SAGOM.Domain.Entities.Person", "CpfNavigation")
                        .WithOne("Employee")
                        .HasForeignKey("SAGOM.Domain.Entities.Employee", "Cpf")
                        .HasConstraintName("FK_Colaborador.cpf");

                    b.HasOne("SAGOM.Domain.Entities.Role", "IdRoleNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Colaborador.id_cargo");

                    b.Navigation("CnpjCompanyNavigation");

                    b.Navigation("CpfNavigation");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ProductServiceOrder", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Product", "IdProductNavigation")
                        .WithMany("ProductServiceOrders")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_Produto_Ordem_de_Servico.id_produto");

                    b.HasOne("SAGOM.Domain.Entities.ServiceOrder", "IdServiceOrderNavigation")
                        .WithMany("ProductServiceOrders")
                        .HasForeignKey("IdServiceOrder")
                        .HasConstraintName("FK_Produto_Ordem_de_Servico.id_ordem_servico");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdServiceOrderNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ServiceOrder", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.CostumerService", "IdCostumerServiceNavigation")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("IdCostumerService")
                        .HasConstraintName("FK_Ordem_de_Servico.id_atendimento");

                    b.Navigation("IdCostumerServiceNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ServiceServiceOrder", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Service", "IdServiceNavigation")
                        .WithMany("ServiceServiceOrders")
                        .HasForeignKey("IdService")
                        .HasConstraintName("FK_Servico_Ordem_de_Servico.id_servico");

                    b.HasOne("SAGOM.Domain.Entities.ServiceOrder", "IdServiceOrderNavigation")
                        .WithMany("ServiceServiceOrders")
                        .HasForeignKey("IdServiceOrder")
                        .HasConstraintName("FK_Servico_Ordem_de_Servico.id_ordem_servico");

                    b.Navigation("IdServiceNavigation");

                    b.Navigation("IdServiceOrderNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Tool", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Employee", "IdEmployeeNavigation")
                        .WithMany("Tools")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("FK_Ferramenta.id_colaborador");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("SAGOM.Domain.Entities.Costumer", "IdCostumerNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("IdCostumer")
                        .IsRequired()
                        .HasConstraintName("FK_Veiculo.id_cliente");

                    b.Navigation("IdCostumerNavigation");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Company", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Costumer", b =>
                {
                    b.Navigation("CostumerServices");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.CostumerService", b =>
                {
                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Employee", b =>
                {
                    b.Navigation("CostumerServices");

                    b.Navigation("Tools");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Person", b =>
                {
                    b.Navigation("Costumer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductServiceOrders");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceServiceOrders");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.ServiceOrder", b =>
                {
                    b.Navigation("ProductServiceOrders");

                    b.Navigation("ServiceServiceOrders");
                });

            modelBuilder.Entity("SAGOM.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("CostumerServices");
                });
#pragma warning restore 612, 618
        }
    }
}
